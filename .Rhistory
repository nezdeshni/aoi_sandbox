),
#AOI set editor container
tags$div(id='CreateSetContainerClicker',HTML(paste("<h4>Area sets</H4>"))),
tags$div(id = 'CreateSetContainer', class= "clickerItem", HTML(paste(
#
textInput('AOISetNameInput','Name of selected set'),
fluidRow(actionButton('repSet','Apply changes',align='center'),
actionButton('delSet','Delate set',align='center'),align='center'
),
selectInput('AOIsetList','Existing sets', choices = setSelectorOptions()),
sep='', collapse='' ))
)
),
#Main panel Canvas and AOI multiple select
mainPanel( tags$canvas(id = "imgEditorCanvas", width = "300", height = "350"), img(id='hiddenImgBuffer'),
tags$div(id = 'SelectContainer', class= "sltrCont", HTML(paste(
'<select multiple="multiple" size="5" class="AOImltS" name="duallistbox"></select>',
sep='',collapse='' ))
)
)
)
)
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
source("scriptNstylesheet.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
runApp()
library(shiny)
# clientEnvStimListBuffer<-stm
# clientEnvAOIListBuffer<-aoi
# clientEnvAOI_setListBuffer<-aoi_set
shinyServer(
function(input, output, session) {
#util function for building answer for IMG (stimul) data request
createClientImgSource<-function(input){
if ( !inputValueRecived(input$stimId) ){
localImgSource<-als$stmo(
imgDataURI= input$imgSrc,
name=input$stimNameShnInput,
# uid=input$stimId,
imgWidth = as.numeric(input$stimWidthShnInput),
imgHeight = as.numeric(input$stimHeightShnInput) )
} else {
localImgSource<-als$ebu(clientEnvStimListBuffer,input$stimId)
localImgSource$imgDataURI<-input$imgSrc
localImgSource$name<-input$stimNameShnInput
localImgSource$imgWidth<-as.numeric(input$stimWidthShnInput)
localImgSource$imgHeight<-as.numeric(input$stimHeightShnInput)
}
return(localImgSource)
}
#check for "value not undefined"
inputValueRecived<-function(valueToCheck){return(length(valueToCheck))}
#UI event "stimul choosen in list"
observeEvent(input$stimNameList,{
selected_id<-input$stimNameList
selectedElement<-als$ebu(clientEnvStimListBuffer,selected_id)
print(selected_id)
if(length(selectedElement)){
msg<-list(src=selectedElement$imgDataURI, pictId=selected_id, name=selectedElement$name, imgWidth = 0, imgHeight = 0, isnew=FALSE)
print("replace call")
session$sendCustomMessage('replaceImgCallbackHandler', msg) }
if(!length(selectedElement)){
msg<-"clearInputs"
session$sendCustomMessage('resetInputsImgCallbackHandler', msg)
print("clear call") }      })
#
observeEvent(input$AOIsetList,{
selected_id<-input$AOIsetList
selectedElement<-als$ebu(clientEnvAOI_setListBuffer,selected_id)
if(length(selectedElement)){
setData<-DataFromAOIset(selectedElement,clientEnvAOIListBuffer)
uids<-lapply(setData,function(x)  x$uid  )
numbr<-lapply(setData,function(x) als$nbu(clientEnvAOIListBuffer, x$uid)  )
msg<-list(name=selectedElement$name,ids=as.vector(numbr), uids=as.vector(uids))
print("replace call")
session$sendCustomMessage('replaceAOI_setCallbackHandler', msg) }
if(!length(selectedElement)){
msg<-"clearInputs"
session$sendCustomMessage('resetInputsAOICallbackHandler', msg)
print("clear call") }      })
#Stimul data operations
observeEvent(input$saveStim,{
if(!inputValueRecived(input$stimId)){
localImgSource<-createClientImgSource(input)
clientEnvStimListBuffer<<-als$acol(clientEnvStimListBuffer,localImgSource)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[getNumberByUID(clientEnvStimListBuffer,clientEnvStimListBuffer$lastId)])}
else {print(paste("can not save with not empty ID=",input$stimId))}      })
observeEvent(input$repStim,{
replaceAtThisID<-as.numeric(input$stimId)
print( replaceAtThisID)
if(inputValueRecived(replaceAtThisID) ){
localImgSource<-createClientImgSource(input)
str(localImgSource)
clientEnvStimListBuffer<<-als$rcol(clientEnvStimListBuffer,localImgSource)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[getNumberByUID(clientEnvStimListBuffer,replaceAtThisID)])
} else {print(paste("could not replace with id NULL, recived Id value=",replaceAtThisID))}  })
observeEvent(input$delStim,{
delateAtThisID<-input$stimId
if(inputValueRecived(delateAtThisID)){
clientEnvStimListBuffer<<-als$dcol(clientEnvStimListBuffer,delateAtThisID)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[1])
} else {print(paste("could not delate with id NULL, recived Id value=",delateAtThisID))}  })
# Raw AOI objects operations
observeEvent(input$newAOIObj,{
AOIObj<-input$newAOIObj
if(inputValueRecived(AOIObj)){
print("recive new AOI")
AOIo<-als$aoio(name=AOIObj$name, shape=AOIObj$shape, dispositionData=AOIObj$data)
clientEnvAOIListBuffer<<-als$acol(clientEnvAOIListBuffer,AOIo)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("no valid AOI data recived",replaceAtThisID))}  })
observeEvent(input$repAOIObj,{
AOIObj<-input$repAOIObj
if(inputValueRecived(AOIObj$id)){
print("recive rep AOI")
AOIo <- als$ebu(clientEnvAOIListBuffer,AOIObj$id)
if (!is.null(AOIo)){
AOIo$name<-AOIObj$name
AOIo$shape<-AOIObj$shape
AOIo$dispositionData<-AOIObj$data
clientEnvAOIListBuffer<<-als$rcol(clientEnvAOIListBuffer,AOIo)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("could not find element with uid ",AOIObj$id))}
} else {print(paste("no valid AOI data recived"))}  })
observeEvent(input$delAOIObj,{
AOIObjId<-input$delAOIObj
if(inputValueRecived(AOIObjId)){
print("recive del AOI")
clientEnvAOIListBuffer<<-als$dcol(clientEnvAOIListBuffer,AOIObjId)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("no valid AOI data recived"))}  })
observeEvent(input$newSet,{
AOIids<-input$newSet$setData
if(inputValueRecived(AOIids)){
print("recive new set")
print(AOIids)
AOISO<-als$aseto(name=input$newSet$name, UIDs=AOIids)
clientEnvAOI_setListBuffer<<-als$acol(clientEnvAOI_setListBuffer,AOISO)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session, clientEnvAOI_setListBuffer$lastId)
} else {print(paste("no valid AOI data recived",replaceAtThisID))}  })
observeEvent(input$repSetMs,{
SetObj<-input$repSetMs
print("recive rep Set message")
if(inputValueRecived(SetObj$uid)){
print("recive rep Set")
Seto <- als$ebu(clientEnvAOI_setListBuffer,SetObj$uid)
if (!is.null(Seto)){
Seto$name<-SetObj$name
Seto$UIDs<-SetObj$setData
clientEnvAOI_setListBuffer<<-als$rcol(clientEnvAOI_setListBuffer,Seto)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session,SetObj$uid)
} else {print(paste("could not find element with uid ",SetObj$uid))}
} else {print(paste("no valid set data recived"))}  })
observeEvent(input$delSetMs,{
SetObjId<-input$delSetMs$uid
if(inputValueRecived(SetObjId)){
print("recive del set")
clientEnvAOI_setListBuffer<<-als$dcol(clientEnvAOI_setListBuffer,SetObjId)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session, clientEnvAOI_setListBuffer$lastId)
} else {print(paste("no valid set data recived"))}  })
#Proceeding request for AOI data
observeEvent(input$waitForAOI,{
print("call for AOI")
msg<-list()
if(clientEnvAOIListBuffer$lastId>0){
msg$data<-lapply(clientEnvAOIListBuffer$data,function(x) list(rType=x$shape, rData=x$dispositionData, name=x$name, rId=x$uid)     )
msg$nextId<-clientEnvAOIListBuffer$lastId+1
session$sendCustomMessage('loadAOICollectionCallbackHandler', msg)    }
else {print(paste("empty request data"))}
})
})
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
source("scriptNstylesheet.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
runApp()
library(shiny)
# clientEnvStimListBuffer<-stm
# clientEnvAOIListBuffer<-aoi
# clientEnvAOI_setListBuffer<-aoi_set
shinyServer(
function(input, output, session) {
#util function for building answer for IMG (stimul) data request
createClientImgSource<-function(input){
if ( !inputValueRecived(input$stimId) ){
localImgSource<-als$stmo(
imgDataURI= input$imgSrc,
name=input$stimNameShnInput,
# uid=input$stimId,
imgWidth = as.numeric(input$stimWidthShnInput),
imgHeight = as.numeric(input$stimHeightShnInput) )
} else {
localImgSource<-als$ebu(clientEnvStimListBuffer,input$stimId)
localImgSource$imgDataURI<-input$imgSrc
localImgSource$name<-input$stimNameShnInput
localImgSource$imgWidth<-as.numeric(input$stimWidthShnInput)
localImgSource$imgHeight<-as.numeric(input$stimHeightShnInput)
}
return(localImgSource)
}
#check for "value not undefined"
inputValueRecived<-function(valueToCheck){return(length(valueToCheck))}
#UI event "stimul choosen in list"
observeEvent(input$stimNameList,{
selected_id<-input$stimNameList
selectedElement<-als$ebu(clientEnvStimListBuffer,selected_id)
print(selected_id)
if(length(selectedElement)){
msg<-list(src=selectedElement$imgDataURI, pictId=selected_id, name=selectedElement$name, imgWidth = 0, imgHeight = 0, isnew=FALSE)
print("replace call")
session$sendCustomMessage('replaceImgCallbackHandler', msg) }
if(!length(selectedElement)){
msg<-"clearInputs"
session$sendCustomMessage('resetInputsImgCallbackHandler', msg)
print("clear call") }      })
#
observeEvent(input$AOIsetList,{
selected_id<-input$AOIsetList
selectedElement<-als$ebu(clientEnvAOI_setListBuffer,selected_id)
if(length(selectedElement)){
setData<-DataFromAOIset(selectedElement,clientEnvAOIListBuffer)
uids<-lapply(setData,function(x)  x$uid  )
numbr<-lapply(setData,function(x) als$nbu(clientEnvAOIListBuffer, x$uid)  )
msg<-list(name=selectedElement$name,ids=as.vector(numbr), uids=as.vector(uids))
print("replace call")
session$sendCustomMessage('replaceAOI_setCallbackHandler', msg) }
if(!length(selectedElement)){
msg<-"clearInputs"
session$sendCustomMessage('resetInputsAOICallbackHandler', msg)
print("clear call") }      })
#Stimul data operations
observeEvent(input$saveStim,{
if(!inputValueRecived(input$stimId)){
localImgSource<-createClientImgSource(input)
clientEnvStimListBuffer<<-als$acol(clientEnvStimListBuffer,localImgSource)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[getNumberByUID(clientEnvStimListBuffer,clientEnvStimListBuffer$lastId)])}
else {print(paste("can not save with not empty ID=",input$stimId))}      })
observeEvent(input$repStim,{
replaceAtThisID<-as.numeric(input$stimId)
print( replaceAtThisID)
if(inputValueRecived(replaceAtThisID) ){
localImgSource<-createClientImgSource(input)
str(localImgSource)
clientEnvStimListBuffer<<-als$rcol(clientEnvStimListBuffer,localImgSource)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[getNumberByUID(clientEnvStimListBuffer,replaceAtThisID)])
} else {print(paste("could not replace with id NULL, recived Id value=",replaceAtThisID))}  })
observeEvent(input$delStim,{
delateAtThisID<-input$stimId
if(inputValueRecived(delateAtThisID)){
clientEnvStimListBuffer<<-als$dcol(clientEnvStimListBuffer,delateAtThisID)
.GlobalEnv$stm<-clientEnvStimListBuffer
inputOptionsValue<-pictSelectorOptions()
updateSelectInput(session, 'stimNameList', choices = inputOptionsValue,
selected = inputOptionsValue[1])
} else {print(paste("could not delate with id NULL, recived Id value=",delateAtThisID))}  })
# Raw AOI objects operations
observeEvent(input$newAOIObj,{
AOIObj<-input$newAOIObj
if(inputValueRecived(AOIObj)){
print("recive new AOI")
AOIo<-als$aoio(name=AOIObj$name, shape=AOIObj$shape, dispositionData=AOIObj$data)
clientEnvAOIListBuffer<<-als$acol(clientEnvAOIListBuffer,AOIo)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("no valid AOI data recived",replaceAtThisID))}  })
observeEvent(input$repAOIObj,{
AOIObj<-input$repAOIObj
if(inputValueRecived(AOIObj$id)){
print("recive rep AOI")
AOIo <- als$ebu(clientEnvAOIListBuffer,AOIObj$id)
if (!is.null(AOIo)){
AOIo$name<-AOIObj$name
AOIo$shape<-AOIObj$shape
AOIo$dispositionData<-AOIObj$data
clientEnvAOIListBuffer<<-als$rcol(clientEnvAOIListBuffer,AOIo)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("could not find element with uid ",AOIObj$id))}
} else {print(paste("no valid AOI data recived"))}  })
observeEvent(input$delAOIObj,{
AOIObjId<-input$delAOIObj
if(inputValueRecived(AOIObjId)){
print("recive del AOI")
clientEnvAOIListBuffer<<-als$dcol(clientEnvAOIListBuffer,AOIObjId)
.GlobalEnv$aoi<-clientEnvAOIListBuffer
} else {print(paste("no valid AOI data recived"))}  })
observeEvent(input$newSet,{
AOIids<-input$newSet$setData
if(inputValueRecived(AOIids)){
print("recive new set")
print(AOIids)
AOISO<-als$aseto(name=input$newSet$name, UIDs=AOIids)
clientEnvAOI_setListBuffer<<-als$acol(clientEnvAOI_setListBuffer,AOISO)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session, clientEnvAOI_setListBuffer$lastId)
} else {print(paste("no valid AOI data recived",replaceAtThisID))}  })
observeEvent(input$repSetMs,{
SetObj<-input$repSetMs
print("recive rep Set message")
if(inputValueRecived(SetObj$uid)){
print("recive rep Set")
Seto <- als$ebu(clientEnvAOI_setListBuffer,SetObj$uid)
if (!is.null(Seto)){
Seto$name<-SetObj$name
Seto$UIDs<-SetObj$setData
clientEnvAOI_setListBuffer<<-als$rcol(clientEnvAOI_setListBuffer,Seto)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session,SetObj$uid)
} else {print(paste("could not find element with uid ",SetObj$uid))}
} else {print(paste("no valid set data recived"))}  })
observeEvent(input$delSetMs,{
SetObjId<-input$delSetMs$uid
if(inputValueRecived(SetObjId)){
print("recive del set")
clientEnvAOI_setListBuffer<<-als$dcol(clientEnvAOI_setListBuffer,SetObjId)
.GlobalEnv$aoi_set<-clientEnvAOI_setListBuffer
updSetSelector(session, clientEnvAOI_setListBuffer$lastId)
} else {print(paste("no valid set data recived"))}  })
#Proceeding request for AOI data
observeEvent(input$waitForAOI,{
print("call for AOI")
msg<-list()
if(clientEnvAOIListBuffer$lastId>0){
msg$data<-lapply(clientEnvAOIListBuffer$data,function(x) list(rType=x$shape, rData=x$dispositionData, name=x$name, rId=x$uid)     )
msg$nextId<-clientEnvAOIListBuffer$lastId+1
session$sendCustomMessage('loadAOICollectionCallbackHandler', msg)    }
else {print(paste("empty request data"))}
})
})
library(shiny)
clientEnvStimListBuffer<-stm
clientEnvAOIListBuffer<-aoi
clientEnvAOI_setListBuffer<-aoi_set
hiddenInput <- function(id){
div(class='form-group shiny-input-container', HTML(paste('<input id="',id,'" type="hidden" class="form-control shiny-hidden-input" value="">',sep='',collapse='')))}
pictSelectorOptions<-function(){ return(setNames(als$uids(clientEnvStimListBuffer), als$nams(clientEnvStimListBuffer)))}
setSelectorOptions<-function(){return(setNames(als$uids(clientEnvAOI_setListBuffer), als$nams(clientEnvAOI_setListBuffer)))}
updSetSelector<-function(session,sn){
inputOptionsValue<-setSelectorOptions()
updateSelectInput(session, 'AOIsetList', choices = inputOptionsValue,
selected = inputOptionsValue[getNumberByUID(clientEnvAOI_setListBuffer,sn)])}
# Define UI for dataset viewer application
shinyUI(
fluidPage(
tags$head(tags$script(src='CustomJs/fabric.js')),
#GUI and server interaction JS
tags$head(tags$script(src='CustomJs/globals.js')),
#GUI and server interaction JS
tags$head(tags$script(src='CustomJs/fabric_extras.js')),
#GUI and server interaction JS
tags$head(tags$script(src='CustomJs/stim.js')),
#GUI and server interaction JS
tags$head(tags$script(src='CustomJs/AOI.js')),
#GUI and server interaction JS
tags$head(tags$script(src='CustomJs/AOI_sets.js')),
#dual list multiple select library
tags$head(tags$script(src='CustomJs/jquery.bootstrap-duallistbox.js')),
tags$head(tags$link(rel="stylesheet", type="text/css", href="../CustomJs/bootstrap-duallistbox.css" ) ) ,
sidebarPanel(
id="ImgCollectionPannel",
#Stimul editor container
tags$div(id='LoadImgContainerClicker',HTML(paste("<h4>Image collection editor</h4>"))),
tags$div(id = 'LoadImgContainer', class= "clickerItem", HTML(paste(
fileInput('stimImgShnFileSource','Choose stimul file'),
textInput('stimNameShnInput','Enter name for this stimul',''),
numericInput('stimWidthShnInput','You could change width parameter',0),
numericInput('stimHeightShnInput','You could change Height parameter',0),
fluidRow(actionButton('saveStim','Load',align='center'),
actionButton('repStim','Replace',align='center'),
actionButton('delStim','Delate',align='center'), align='center'
),
selectInput('stimNameList','Existing image names', choices = pictSelectorOptions()),
hiddenInput('imgMetaDataStorage'),
sep='',collapse='') )
),
#AOI editor container
tags$div(id='CreateAOIContainerClicker',HTML(paste("<h4>Area of interest</H4>"))),
tags$div(id ='CreateAOIContainer', class= "clickerItem", HTML(paste(
radioButtons('aoigroup','', choices = list("rect","circle"), selected = NULL, inline = TRUE, width = NULL),
actionButton('AddAOI','NewAOI'),
actionButton('drawPolygon','Draw polygon'),
tags$div(id ='snglAOIparams', HTML(paste(
textInput('AOINameInput','Enter name for this stimul'),
actionButton('RenameAOI','Apply new name'),sep='', collapse=''))
),
sep='', collapse='' ))
),
#AOI set editor container
tags$div(id='CreateSetContainerClicker',HTML(paste("<h4>Area sets</H4>"))),
tags$div(id = 'CreateSetContainer', class= "clickerItem", HTML(paste(
#
textInput('AOISetNameInput','Name of selected set'),
fluidRow(actionButton('repSet','Apply changes',align='center'),
actionButton('delSet','Delate set',align='center'),align='center'
),
selectInput('AOIsetList','Existing sets', choices = setSelectorOptions()),
sep='', collapse='' ))
)
),
#Main panel Canvas and AOI multiple select
mainPanel( tags$canvas(id = "imgEditorCanvas", width = "300", height = "350"), img(id='hiddenImgBuffer'),
tags$div(id = 'SelectContainer', class= "sltrCont", HTML(paste(
'<select multiple="multiple" size="5" class="AOImltS" name="duallistbox"></select>',
sep='',collapse='' ))
)
)
)
)
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
runApp()
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
setwd("D:\\RGNF_Repo\\AOI_sandbox")
source("f_alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
runApp()
library(shinyfabricjs)
runApp()
library(shinyfabricjs)
library(shinyfabricjs)
setwd("D:\\RGNF_Repo\\AOI_sandbox")
library(shiny)
source("alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
install.packages("roxygen2")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
load.all()
install_github("devtool", "hodley")
library("devtools", lib.loc="~/R/win-library/3.2")
library("roxygen2", lib.loc="~/R/win-library/3.2")
install_github("devtool", "hodley")
install_github("devtool", "hodley/devtool")
install_github("devtool", "hodley")
install_github("hodley")
install_github("hodley/devtool")
setwd("D:\\RGNF_Repo\\AOI_sandbox")
library(shiny)
source("alias.R")
stm<-als$new(als$enm$cln$STIMUL_COLLECTION)
aoi<-als$new(als$enm$cln$AOI_COLLECTION)
aoi_set<-als$new(als$enm$cln$SETS_COLLECTION)
runApp()
